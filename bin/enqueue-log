#!/usr/bin/env perl
use strict;
use warnings;

use FindBin;
BEGIN { unshift @INC, "$FindBin::Bin/../lib"; }

use EnQ;
use POSIX;
use IO::Socket::INET;
$/="\r\n";
$\="\r\n";

my $EnQ = EnQ->new({
    config_file => $FindBin::Bin =~ s|(.+/enqueue).+|$1/enqueue.yml|r});


my $socket = new IO::Socket::INET(
    PeerAddr => '127.0.0.1:5038',
    Proto    => 'tcp') or die $!;

while(<$socket>){
    chomp;
    if(m|Asterisk Call Manager/([0-9.]+)|){
	print $socket 'Action: Login' ;
	print $socket 'Username: EnQ' ;
	print $socket 'Secret: EnQ'   ;
	print $socket 'Events: On'    ;
	print $socket ''              ;
    }

    last if /Response: Success/;
}

use Data::Dumper;
use Mojo::JSON qw(encode_json);
sub log2enq {
    my $e = shift;
    my $o = $EnQ->Obj('Event');
    $o->eid(time);
    $o->type($e->{'Event'});
    $o->time(POSIX::strftime("%F %T", localtime));
    $o->json(encode_json($e));
    $o->Push();
    print Dumper $o->Data;
}

my $event;
while(<$socket>){
    chomp;
    my ($key, $val) = ('','');
    if(!(($key, $val) = /([^:]+): (.+)/)){
	log2enq($event) if $event->{'Event'};
	undef $event;
	next;
    }

    $event->{$key} = $val;
}
